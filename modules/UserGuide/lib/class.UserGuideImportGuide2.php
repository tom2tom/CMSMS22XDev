<?php
/*
This file is part of CMS Made Simple module: UserGuide
Copyright (C) 2024 CMS Made Simple Foundation Inc <foundation@cmsmadesimple.org>
Refer to license and other details at the top of file UserGuide.module.php
*/
namespace UserGuide;

use cms_config;
use cms_utils;
use CmsApp;
use CmsFileSystemException;
use Exception;
use SimpleXMLElement;
use UserGuide; // module class in global space
use UserGuide\UserGuideUtils; // not really needed here
use const CMS_DB_PREFIX;
use function audit;
use function cleanValue;
use function lang;
use function startswith;

class UserGuideImportGuide2
{
    private $tomod;
    private $frommod;
    private $xml;
    // @frommod preferences retrieved from imported xml file
    private $importprefs = [];
    private $exclude_patns = [ //TODO check these filepath-basename regex's
     '^index\.html?$',
     '^\.htaccess$',
     '^web\.config$',
     '\.git', //TODO also all descendant files
     '\.svn', //TODO also all descendant files
     'cvs$',
     '~$',
     '\.bak$',
     '\.tmp$',
     '\#.*\#$',
     '\.php.*$',
     '\.js$',
    ];

    public function __construct(UserGuide $mod = null)
    {
        $this->frommod = cms_utils::get_module('UserGuide2'); // might be N/A
        if ($mod) {
            $this->tomod = $mod;
        } else {
            $this->tomod = cms_utils::get_module('UserGuide');
        }
    }

    /**
     * Import uploaded .xml file, any version
     *
     * @param string $filename
     * @return bool indicating success
     */
    public function import($filename = '')
    {
        if (empty($filename)) { // $filename = $_FILES[$xmlfield]['tmp_name']
            return false;
        }

        $file = file_get_contents($filename);
        $this->xml = new SimpleXMLElement($file);

        if ($this->xml->version >= 1.3) {
            $this->getPreferences();
            $num = $this->getGuides();
            $filesdone = $this->getFiles();
            return $filesdone && $num > 0; // TODO return a comprehensive success-indicator
        } else {
            return $this->import_xml_v1();
        }
    }
    /**
     * Import file generated by UserGuide2 version < 1.3
     *
     * @return bool indicating success
     * @throws Exception
     */
    private function import_xml_v1()
    {
        if (!$this->frommod) {
            throw new Exception('UserGuide2 module not present');
        }
        $db = CmsApp::get_instance()->GetDb();
        $totable = CMS_DB_PREFIX.'module_userguide';
        $existing = $db->GetCol("SELECT name FROM $totable");
        if ($existing) {
            $pos = (int)$db->GetOne("SELECT MAX(position) FROM $totable");
        } else {
            $pos = 0;
        }
        $rev = 'Imported from User Guide 2';
        $smarty = (int)$this->frommod->GetPreference('useSmarty', 0); // same for all guides
        $when = '2019-06-17 22:13:00'; //release date-time of UserGuide2 V.1.2.1
        //no placeholders for restricted, template_id, styles ?
        $sql = "INSERT INTO $totable
(name,revision,position,active,admin,search,smarty,create_date,modified_date,content)
VALUES (?,'$rev',?,?,?,1,$smarty,'$when',null,?)";
        $num = 0; //import counter
        foreach ($this->xml->fields->field as $field) {
            $name = trim(cleanValue((string)$field->title));
            if ($existing) {
                $name = UserGuideUtils::uniquename($name, $existing);
            } else {
                $existing[] = $name;
            }
            $content = UserGuideUtils::cleanContent((string)$field->content);
            $dbr = $db->Execute($sql, [
                $name,
                ++$pos,
                (int)$field->active,
                (int)$field->admin,
                $content
            ]);
            if ($dbr) { $num++; }
        }
        return $num > 0;
    }

    /**
     * Get all preferences recorded in the xml
     *
     * @return void
     */
    private function getPreferences()
    {
        if (!isset($this->xml->prefs)) {
            return;
        }
        $data = unserialize(base64_decode($this->xml->prefs));
        if ($data) {
            foreach ($data as $name => $value) {
                // just record for use elsewhere
                $this->importprefs[$name] = $value;
            }
        }
    }

    /**
     * Get all guides from the xml
     *
     * @return int no. of guides processed
     */
    private function getGuides()
    {
        if (!isset($this->xml->db)) {
            return 0;
        }
        $num = 0; //import counter
        $data = unserialize(base64_decode($this->xml->db));
        if ($data) {
            $db = CmsApp::get_instance()->GetDb();
            $fromtbls = ['module_userguide2']; //no prefix for this
            $totable = CMS_DB_PREFIX.'module_userguide';
            $existing = $db->GetCol("SELECT name FROM $totable");
            if ($existing) {
                $pos = (int)$db->GetOne("SELECT MAX(position) FROM $totable");
            } else {
                $pos = 0;
            }
            $fromFolder = (isset($this->importprefs['imageFolder'])) ? $this->importprefs['imageFolder'] : '';
            $toFolder = $this->tomod->GetPreference('filesFolder');
            $newf = $fromFolder && $toFolder && $toFolder != $fromFolder;
            $rev = 'Imported from User Guide 2';
            $when = '2021-09-11 09:59:00'; //release date-time of latest UserGuide2 version
            $smarty = !empty($this->importprefs['useSmarty']); //applies to all guides
            //no placeholders for restricted, template_id, styles ?
            foreach ($data as $tablename => $tabledata) {
                if (in_array($tablename, $fromtbls)) {
                    foreach ($tabledata as $row) {
                        $row['name'] = trim(cleanValue($row['title']));
                        if ($existing) {
                            $row['name'] = UserGuideUtils::uniquename($row['name'], $existing);
                        } else {
                            $existing[] = $row['name'];
                        }
                        unset($row['title'], $row['id']);
                        $row['position'] = ++$pos;
                        $row['revision'] = $rev;
                        $row['search'] = 1;
                        $row['smarty'] = $smarty;
                        $row['modified_date'] = $when;
                        $row['content'] = UserGuideUtils::cleanContent($row['content']);
                        if ($newf) {
                            $row['content'] = str_replace($fromFolder, $toFolder, $row['content']);
                        }
                        $fields = implode(',', array_keys($row));
                        $phs = str_repeat('?,', count($row) -1);
                        $sql = "INSERT INTO $totable ($fields) VALUES ($phs?)";
                        $dbr = $db->Execute($sql, array_values($row));
                        if ($dbr) {
                            $num++;
                        } else {
                            audit('', 'UserGuide import', $row['name'].' failed: '.$db->ErrorMsg());
                        }
                    }
                }
            }
        }
        return $num;
    }

    /**
     * Get all files from the xml
     *
     * @return bool indicating success
     * @throws CmsFileSystemException
     */
    private function getFiles()
    {
        if (!isset($this->xml->files)) {
            return true; // nothing-to-process == success
        }

        $config = cms_config::get_instance();
        $dir = $config['image_uploads_path'];
        // first check whether we can write to the uploads folder
        if (!is_writable($dir)) {
            return false;
        }

        $filesFolder = $this->tomod->GetPreference('filesFolder', '');
        if ($filesFolder) $dir .= DIRECTORY_SEPARATOR.$filesFolder;

        if (!file_exists($dir)) {
            if (!@mkdir($dir, 0775, true) && !is_dir($dir)) { //TODO relevant permissions
                return false;
            }
        }

        foreach ($this->xml->files->file as $xmlFile) {
            if (!isset($xmlFile->filename) || !isset($xmlFile->isdir)) {
                return false;
            }

            $filespec = $dir.DIRECTORY_SEPARATOR.$xmlFile->filename;
            $isdir = (string)$xmlFile->isdir;
            if ($isdir) {
                if (!@mkdir($filespec, 0775, true) && !is_dir($filespec)) { //TODO relevant permissions
                    break;
                }
            } else {
                $data = (string) $xmlFile->data;
                if ($data !== '') {
                    $data = base64_decode($data); //TODO encoding ok?
                    if ($data !== false) {
                        $fp = @fopen($filespec, 'w');
                        if ($fp) {
                            @fwrite($fp, $data);
                            @fclose($fp);
                        } else {
                            throw new CmsFileSystemException(lang('errorcantcreatefile').' '.$filespec);
                        }
                    }
                }
            }
        }
        return true;
    }

    /**
     *
     * @return array error string(s) or empty
     * @throws Exception
     */
    public function migrate()
    {
/* CMS_DB_PREFIX.module_userguide2 has
   title C(255) NOTNULL, >> name
   position I, >> adjust
   active I1, same
   admin I1, same
   content X sanit
  Preference('customModuleName' irrelevant
  Preference('adminSection' irrelevant
  Preference('useSmarty' applies to all guides
  Preference('imageFolder' copy contents to UserGuide place
*/
        if (!$this->frommod) {
            throw new Exception('UserGuide2 module not present');
        }
        $errors = [];
        //c.f. import_xml_v1() checks for duplicate names
        $db = CmsApp::get_instance()->GetDb();
        $data = $db->GetArray('SELECT title,active,admin,content FROM '.CMS_DB_PREFIX.'module_userguide2 ORDER BY position,title');
        if ($data) {
            $rev = 'Imported from User Guide 2';
            $smarty = (int)$this->frommod->GetPreference('useSmarty', 0); // applies to all guides
            $when = '2021-09-11 09:59:00'; //release date-time of latest UserGuide2 version
            $totable = CMS_DB_PREFIX.'module_userguide';
            $existing = $db->GetCol("SELECT name FROM $totable");
            if ($existing) {
                $pos = (int)$db->GetOne("SELECT MAX(position) FROM $totable");
            } else {
                $pos = 0;
            }
            //no placeholders for restricted, template_id, styles ?
            $sql = "INSERT INTO $totable
(name,revision,position,active,admin,search,smarty,create_date,modified_date,content)
VALUES (?,'$rev',?,?,?,1,$smarty,'$when',null,?)";
            foreach ($data as $row) {
                $name = trim(cleanValue($row['title']));
                if ($existing) {
                    $name = UserGuideUtils::uniquename($name, $existing);
                } else {
                    $existing[] = $name;
                }
                $content = UserGuideUtils::cleanContent($row['content']);
                $db->Execute($sql, [$name, ++$pos, (int)$row['active'], (int)$row['admin'], $content]);
            }
        } elseif ($db->ErrorNo() == 0) {
            $errors[] = 'No UserGuide2 data are available for import.';
        } else {
            $errors[] = 'Database import failed: '.$db->ErrorMsg();
        }

        if ($data) {
            $s = $this->frommod->GetPreference('imageFolder');
            if ($s) {
                //copy uploaded files to UserGuide place
                $config = cms_config::get_instance();
                $dir1 = $config['uploads_path'];
                $dir2 = $config['image_uploads_path'];
                $dp1 = $dir1 . DIRECTORY_SEPARATOR . $s;
                $l = strlen($dp1);
                $t = $this->tomod->GetPreference('filesFolder');
                if (!$t) {
                    if (startswith($dp1, $dir2)) {
                        $name = substr($s, strlen($dir2));
                    } elseif (startswith($s, 'uploads')) {
                        $name = substr($s, 7);
                    } else {
                        $name = $s;
                    }
                    $t = trim($name, ' \\/');
                    $t = strtr($t, '\\/', DIRECTORY_SEPARATOR.DIRECTORY_SEPARATOR);
                    $this->tomod->SetPreference('filesFolder', $t);
                }
                $dp2 = $dir2 . DIRECTORY_SEPARATOR . $t;
                //recursive copy $dp1 to $dp2
                $errors = array_merge($errors, UserGuideUtils::recursiveCopy($dp1, $dp2, $this->exclude_patns));
            }
        }
        return $errors;
    }
} // class
