<?php
/*
This file is part of CMS Made Simple module: UserGuide
Copyright (C) 2024 CMS Made Simple Foundation Inc <foundation@cmsmadesimple.org>
Refer to license and other details at the top of file UserGuide.module.php
*/
//TODO related-files processing uses base64-coded content, which is rubbish
//for any non-trivial file. Consider a better replacement e.g. a tarball
namespace UserGuide;

use cms_config;
use cms_utils;
use CmsApp;
use CmsLayoutTemplateType;
use DOMDocument;
use SimpleXMLElement;
use UserGuide; //module class in global space
use UserGuide\UserGuideImportGuide2; //not strictly needed here
use UserGuide\UserGuideUtils; //ditto
use const CMS_DB_PREFIX;
use function audit;
use function cleanValue;
use function get_recursive_file_list;
use function get_userid;

class UserGuideXML
{
    private $mod;
    private $xml;
    // module preferences relevant to XML I/O
    private $preferences = ['filesFolder'=>''];
    // module preferences retrieved from imported xml file
    private $importprefs = [];
    private $exclude_patns = [ //TODO check these filepath-basename regex's
     '^index\.html?$',
     '^\.htaccess$',
     '^web\.config$',
     '\.git', //TODO also all descendant files
     '\.svn', //TODO also all descendant files
     'cvs$',
     '~$',
     '\.bak$',
     '\.tmp$',
     '\#.*\#$',
     '\.php.*$',
     '\.js$',
    ];
/* TODO DTD c.f. <<<'EOS'
<!DOCTYPE userguides [
<!ELEMENT userguides (dtdversion,module,cmsversion,exportdate,[modulepref*,]guide+,file*)>
<!ELEMENT dtdversion (#PCDATA)>
<!ELEMENT module (#PCDATA)>
<!ELEMENT cmsversion (#PCDATA)>
<!ELEMENT exportdate (#PCDATA)>
<!ELEMENT modulepref (name,value)>
<!ELEMENT guide (name,revision?,[position,]active?,admin?,restricted?,search?,smarty?,author_id?,author?,create_date?,modified_date?,content)
<!ELEMENT name (#PCDATA)>
<!ELEMENT revision(#PCDATA)>
<!ELEMENT position (#PCDATA)> WHY BOTHER?
<!ELEMENT active (#PCDATA)>
<!ELEMENT admin (#PCDATA)>
<!ELEMENT restricted(#PCDATA)>
<!ELEMENT search (#PCDATA)>
<!ELEMENT smarty (#PCDATA)>
<!ELEMENT author_id (#PCDATA)> WHY BOTHER?
<!ELEMENT author (#PCDATA)> CALC IF MISSING
<!ELEMENT create_date (#PCDATA)>
<!ELEMENT modified_date (#PCDATA)>
<!ELEMENT content (#PCDATA)>
<!ELEMENT file (name,isdir?,content)>
<!ELEMENT isdir (#PCDATA)>
]>
EOS;
*/
    public function __construct(UserGuide $mod = null)
    {
        if ($mod) {
            $this->mod = $mod;
        } else {
            $this->mod = cms_utils::get_module('UserGuide');
        }
        foreach ($this->preferences as $key => $val) {
            $this->preferences[$key] =  $this->mod->GetPreference($key);
        }
    }

    /**
     * Export .xml file
     *
     * @return false or not at all
     */
    public function export()
    {
        $this->create_xml();
        $this->addPreferences();
        $this->addGuides();
        $this->addTemplates();
        $this->addStylesheets();
        $this->addFiles();
        $res = $this->output_xml();
        if ($res) exit;
        return false; //TODO return an actual success indicator
    }

    /**
     * Import uploaded .xml file generated by UserGuide or UserGuide2
     * Basic sanity-checks for an uploaded file done upstream, not here
     * @param mixed $filename string | null
     *
     * @return bool
     */
    public function import($filename = '')
    {
        if (empty($filename)) { // $filename = $_FILES[$xmlfield]['tmp_name']
            return false;
        }

        $file = file_get_contents($filename);
        $this->xml = new SimpleXMLElement($file);

        if (isset($this->xml->dtdversion) && !isset($this->xml->version)) {
            $this->getPreferences();
            $num = $this->getGuides();
            $this->getTemplates();
            $this->getStylesheets();
            $filesdone = $this->getFiles();
            return $filesdone && $num > 0; //TODO return a comprehensive success indicator
        }
        // UserGuide2-module format
        unset($file, $this->xml);
        $doer = new UserGuideImportGuide2($this->mod);
        return $doer->import($filename);
    }

    /**
     *
     * @global type $CMS_VERSION
     */
    private function create_xml()
    {
        global $CMS_VERSION;
        //TODO use a DTD with other XML infrastructure
        $baseXML = '<?xml version="1.0" encoding="UTF-8"?><userguide></userguide>';
        $this->xml = new SimpleXMLElement($baseXML);
        $this->xml->addChild('dtdversion', 1.5);
        $this->xml->addChild('module', $this->mod->GetName());
        $this->xml->addChild('cmsversion', $CMS_VERSION);
        $this->xml->addChild('exportdate', date('Y-m-d H:i:s'));
    }

    /**
     * Add all specified preferences into the xml
     *
     * @return void
     */
    private function addPreferences()
    {
        $this->xml->addChild('prefs', htmlspecialchars(
            json_encode($this->preferences,
                JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES | JSON_NUMERIC_CHECK | JSON_PRESERVE_ZERO_FRACTION
            ),
            ENT_NOQUOTES | ENT_DISALLOWED | ENT_XML1));
    }

    /**
     * Add data from module table into the xml
     *
     * @return void
     */
    private function addGuides()
    {
        $db = CmsApp::get_instance()->GetDb();
        $sql = 'SELECT * FROM ' . CMS_DB_PREFIX . 'module_userguide ORDER BY name';
        $data = $db->GetArray($sql);
        if ($data) {
            $xmlParent = $this->xml->addChild('guides');
            foreach ($data as $row) {
                // $row cleanup
                unset($row['id'], $row['author_id']); //TODO template_id unless useful for import-processing
                $xmlParent->addChild('item', htmlspecialchars(
                    json_encode($row,
                        JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES | JSON_NUMERIC_CHECK
                    ),
                    ENT_NOQUOTES | ENT_DISALLOWED | ENT_XML1));
            }
        }
    }

    /**
     * Add data about recorded frontend templates into the xml
     *
     * @return void
     */
    private function addTemplates()
    {
        $types = CmsLayoutTemplateType::load_all_by_originator('UserGuide');
        if ($types && is_array($types)) {
            $typers = [];
            foreach ($types as $type) {
                $id = $type->get_id();
                $typers[$id] = $type->get_name();
            }
            $xmlParent = $this->xml->addChild('templates');
            $db = CmsApp::get_instance()->GetDb();
            $sql = 'SELECT name,content,description,type_id,listable,created,modified FROM ' .
             CMS_DB_PREFIX . 'layout_templates WHERE id=?';
            foreach ($types as $type) {
                $templates = $type->get_template_list();
                if ($templates && is_array($templates)) {
                    foreach ($templates as $template) {
                        $row = $db->GetRow($sql, [$template->get_id()]);
                        //cleanup $row as appropriate
                        $id = (int)$row['type_id'];
                        $row['type_name'] = (isset($typers[$id])) ? $typers[$id] : 'Unknown';
                        $xmlParent->addChild('item', htmlspecialchars(
                           json_encode($row,
                               JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES | JSON_NUMERIC_CHECK
                           ),
                           ENT_NOQUOTES | ENT_DISALLOWED | ENT_XML1));
                    }
                }
            }
        }
    }

    /**
     * Add data about recorded frontend stylesheets into the xml
     *
     * @return void
     */
    private function addStylesheets()
    {
        $db = CmsApp::get_instance()->GetDb();
        $sql = 'SELECT name,content,description,media_type,media_query,created,modified FROM ' .
         CMS_DB_PREFIX . "layout_stylesheets WHERE name LIKE 'UserGuide_%'";
        $data = $db->GetArray($sql);
        if ($data) {
            $xmlParent = $this->xml->addChild('stylesheets');
            foreach ($data as $row) {
                // TODO $row cleanup
                $xmlParent->addChild('item', htmlspecialchars(
                    json_encode($row,
                        JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES | JSON_NUMERIC_CHECK
                    ),
                    ENT_NOQUOTES | ENT_DISALLOWED | ENT_XML1));
            }
        }
    }

    /**
     * Recursively add into the xml files & folders in and below
     * 'filesFolder' (if that preference is set and the folder exists)
     *
     * @return void
     */
    private function addFiles()
    {
        $config = cms_config::get_instance();
        $dir = $config['image_uploads_path'];
        $filesFolder = $this->preferences['filesFolder'];
        if ($filesFolder) {
            $dir .= DIRECTORY_SEPARATOR.$filesFolder;
            if (!is_dir($dir)) {
                return; // is file or N/A, assume not wanted
            }
        } else {
            return;
        }

        $files = get_recursive_file_list($dir, $this->exclude_patns);
        if (count($files) < 2) {
            return; //no files if array has only $dir (with trailing separator)
        }
        $xmlParent = $this->xml->addChild('files');
        foreach ($files as $file) {
            // strip the beginning
            if (substr($file, 0, strlen($dir)) == $dir) {
                $file = substr($file, strlen($dir));
            }
            if ($file == '') {
                continue;
            }
            $filespec = $dir.$file;
            if (@is_dir($filespec)) {
                $file = rtrim($file, ' \\/');
                if ($file == '') {
                    continue;
                }
                $filespec = rtrim($filespec, ' \\/');
                $asdir = true;
            } else {
                $asdir = false;
            }
            $xmlFile = $xmlParent->addChild('item');
            $xmlFile->addChild('relpath', $file);
            if ($asdir) {
                $xmlFile->addChild('isdir', '1');
            } else {
                $content = base64_encode(file_get_contents($filespec)); //TODO encoding ok? could be huge
                $xmlFile->addChild('content', $content);
            }
        }
    }

    /**
     * Initiate download
     * @return bool indicating success
     */
    private function output_xml()
    {
        $n = count(ob_list_handlers());
        for ($i = 0; $i < $n; $i++) { ob_end_clean(); }
//      ob_end_clean(); // not all handlers ?

        $doc = new DOMDocument();
        $doc->preserveWhiteSpace = false;
        $doc->formatOutput = true;
        $doc->loadXML($this->xml->asXML());

        $fwhen = date('Y-m-d_H-i-s', time());

        header('Content-Type: text/xml; charset=utf-8');
        header('Content-Disposition: attachment; filename=UserGuide_Export_' . $fwhen . '.xml');
        header('Expires: 0');
        header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
        header('Cache-Control: private', false);
        header('Pragma: public');
        echo $doc->saveXML();
        return true;
    }

    /**
     * Record all preferences in the xml
     * for possible use in other processing here
     *
     * @return void
     */
    private function getPreferences()
    {
        if (!isset($this->xml->prefs)) {
            return;
        }
        $data = json_decode(
                htmlspecialchars_decode($this->xml->prefs,
                    ENT_NOQUOTES | ENT_DISALLOWED | ENT_XML1),
                true);
        if ($data) {
            foreach ($data as $pref => $value) {
                $this->importprefs[$pref] = $value;
            }
        }
    }

    /**
     * Migrate guides from the xml
     *
     * @return int no. of guides processed
     */
    private function getGuides()
    {
        if (!isset($this->xml->guides)) {
            return 0;
        }
        if (empty($this->xml->guides->item)) {
            return 0;
        }

        $db = CmsApp::get_instance()->GetDb();
        $tablename = CMS_DB_PREFIX.'module_userguide';
        $existing = $db->GetCol("SELECT name FROM $tablename");
        $fromFolder = (isset($this->importprefs['filesFolder'])) ? $this->importprefs['filesFolder'] : '';
        $toFolder = $this->preferences['filesFolder'];
        $newf = $fromFolder && $toFolder && $toFolder != $fromFolder;
        $num = 0; //import counter
        foreach ($this->xml->guides->item as $xmlGuide) {
            $row = json_decode(
                htmlspecialchars_decode((string)$xmlGuide,
                    ENT_NOQUOTES | ENT_DISALLOWED | ENT_XML1),
                true);
            if ($row) {
                unset($row['id']);
                $row['name'] = trim(cleanValue($row['name']));
                if ($existing) {
                    $row['name'] = UserGuideUtils::uniquename($row['name'], $existing);
                } else {
                    $existing[] = $row['name'];
                }
                //position,active,admin,restricted,search,smarty,create_date,modified_date all present in data
                $row['content'] = UserGuideUtils::cleanContent($row['content']);
                if ($newf) {
                    $row['content'] = str_replace($fromFolder, $toFolder, $row['content']);
                }
                $fields = implode(',', array_keys($row));
                $phs = str_repeat('?,', count($row) - 1);
                $sql = "INSERT INTO $tablename ($fields) VALUES ($phs?)";
                $dbr = $db->Execute($sql, array_values($row));
                if ($dbr) {
                    $num++;
                } else {
                    audit('', 'UserGuide import', $row['name'].' failed: '.$db->ErrorMsg());
                }
            } else {
                audit('', 'UserGuide import', (string)$xmlGuide.' failed');
            }
        }
        //TODO involve count($this->xml->guides->item), maybe > $num, in the success indication
        return $num;
    }

    /**
     * Migrate frontend templates from the xml
     *
     * @return int no. of templates processed
     */
    private function getTemplates()
    {
        if (!isset($this->xml->templates)) {
            return 0;
        }
        if (empty($this->xml->templates->item)) {
            return 0;
        }

        $typers = [];
        $types = CmsLayoutTemplateType::load_all_by_originator('UserGuide');
        if ($types && is_array($types)) {
            foreach ($types as $type) {
                $id = $type->get_id();
                $typers[$id] = $type->get_name();
            }
        }
        $db = CmsApp::get_instance()->GetDb();
        $tablename = CMS_DB_PREFIX . 'layout_templates';
        $existing = $db->GetCol("SELECT name FROM $tablename");
        $fromFolder = (isset($this->importprefs['filesFolder'])) ? $this->importprefs['filesFolder'] : '';
        $toFolder = $this->preferences['filesFolder'];
        $newf = $fromFolder && $toFolder && $toFolder != $fromFolder;
        $userid = get_userid(false);
        $num = 0; //import counter
        foreach ($this->xml->templates->item as $xmlTpl) {
            $row = json_decode(
                htmlspecialchars_decode((string)$xmlTpl,
                    ENT_NOQUOTES | ENT_DISALLOWED | ENT_XML1),
                true);
            if ($row) {
                if ($existing) {
                    $row['name'] = UserGuideUtils::uniquename($row['name'], $existing);
                } else {
                    $existing[] = $row['name'];
                }
                $val = (isset($row['type_name'])) ? trim($row['type_name']) : 'Unknown';
                $id = array_search($val, $typers);
                unset($row['type_name']);
                $row['type_id'] = ($id !== false) ? $id : 2; // default to Core::Generic
                $row['type_dflt'] = 0;
                $row['category_id'] = 0;
                $row['owner_id'] = $userid; //omitted from export or now changed
                //TODO any content sanitize needed ?
                if ($newf) {
                    $row['content'] = str_replace($fromFolder, $toFolder, $row['content']);
                }
                $fields = implode(',', array_keys($row));
                $phs = str_repeat('?,', count($row) - 1);
                $sql = "INSERT INTO $tablename ($fields) VALUES ($phs?)";
                $dbr = $db->Execute($sql, array_values($row));
                if ($dbr) {
                    $num++;
                } else {
                    audit('', 'UserGuide template import', $row['name'].' failed: '.$db->ErrorMsg());
                }
            } else {
                audit('', 'UserGuide template import: ', (string)$xmlTpl . ' failed');
            }
        }
        //TODO involve count($this->xml->templates->item)), maybe > $num, in the success indication
        return $num;
    }

    /**
     * Migrate frontend stylesheets from the xml
     *
     * @return int no. of guides processed
     */
    private function getStylesheets()
    {
        if (!isset($this->xml->stylesheets)) {
            return 0;
        }
        if (empty($this->xml->stylesheets->item)) {
            return 0;
        }

        $db = CmsApp::get_instance()->GetDb();
        $tablename = CMS_DB_PREFIX . 'layout_stylesheets';
        $existing = $db->GetCol("SELECT name FROM $tablename");
        $sql = "INSERT INTO $tablename
(name,content,description,media_type,media_query,created,modified)
VALUES (?,?,?,?,?,?,?)";
        $fromFolder = (isset($this->importprefs['filesFolder'])) ? $this->importprefs['filesFolder'] : '';
        $toFolder = $this->preferences['filesFolder'];
        $newf = $fromFolder && $toFolder && $toFolder != $fromFolder;
        $num = 0; // import counter
        foreach ($this->xml->stylesheets->item as $xmlSht) {
            $row = json_decode(
                htmlspecialchars_decode((string)$xmlSht,
                    ENT_NOQUOTES | ENT_DISALLOWED | ENT_XML1),
                true);
            if ($row) {
                if ($existing) {
                    $row['name'] = UserGuideUtils::uniquename($row['name'], $existing);
                } else {
                    $existing[] = $row['name'];
                }
                //TODO any content sanitize needed ?
                if ($newf) {
                    $row['content'] = str_replace($fromFolder, $toFolder, $row['content']);
                }
                $dbr = $db->Execute($sql, [
                    $row['name'],
                    $row['content'],
                    $row['description'],
                    $row['media_type'],
                    $row['media_query'],
                    $row['created'],
                    $row['modified']
                ]);
                if ($dbr) {
                    $num++;
                } else {
                    audit('', 'UserGuide stylesheet import', $row['name'].' failed: '.$db->ErrorMsg());
                }
            } else {
                audit('', 'UserGuide stylesheet import: ', (string)$xmlSht . ' failed');
            }
        }
        //TODO involve count($this->xml->stylesheets->item), maybe > $num, in the success indication
        return $num;
    }

    /**
     * Recursively migrate files & folders from the xml into and below
     * 'filesFolder' preference value (if set)
     * If that is set, but the folder doesn't exist, it will be created
     * if possible
     *
     * @return bool indicating success
     */
    private function getFiles()
    {
        if (!isset($this->xml->files)) {
            return true; // no files == success
        }
        if (empty($this->xml->files->item)) {
            return true; // no files == success
        }
        $filesFolder = $this->preferences['filesFolder'];
        if (!$filesFolder) {
            return true; // no wanted files == success
        }

        $config = cms_config::get_instance();
        $dir = $config['image_uploads_path'];
        if (!is_writable($dir)) {
            return false; // should never fail
        }
        $dir .= DIRECTORY_SEPARATOR.strtr($filesFolder, '\\/', DIRECTORY_SEPARATOR.DIRECTORY_SEPARATOR);
        if (!(is_dir($dir) || @mkdir($dir, 0775))) { //TODO relevant permissions
            return false; // inconveniently-named file !
        }

        $num = 0; // import counter
        foreach ($this->xml->files->item as $xmlFile) {
            if (!(isset($xmlFile->isdir) || isset($xmlFile->content))) {
//              audit('', 'UserGuide file import', 'Data format error: '.$xmlFile->relpath);
                continue;
            }
            //$xmlFile->relpath is relative to whatever uploads folder was
            //in use at the time of export, so no need to manage folder-change
            $rel = strtr((string)$xmlFile->relpath, '\\/', DIRECTORY_SEPARATOR.DIRECTORY_SEPARATOR);
            $itempath = $dir.DIRECTORY_SEPARATOR.$rel;
            if (!empty($xmlFile->isdir)) {
                if (!(is_dir($itempath) || @mkdir($itempath, 0775))) { //TODO relevant permissions
                    audit('', 'UserGuide file import', 'Cannot use or create folder: '.$itempath);
                    continue;
                }
            } else {
                $content = (string)$xmlFile->content;
                if ($content) {
                    $content = base64_decode($content); //TODO encoding ok? could be huge
                    if ($content !== false) {
                        if (file_exists($itempath)) {
                            // substitute a similar name
                            $bn = basename($itempath);
                            $main = substr($bn, 0, strrpos($bn, '.'));
                            $bp = dirname($itempath).DIRECTORY_SEPARATOR;
                            $all = glob($bp.$main.'*');
                            $existing = [];
                            foreach ($all as $fp) {
                                $existing[] = basename($fp);
                            }
                            if ($main != $bn) {
                                $ext = '.'.substr($bn, strrpos($bn, '.') + 1);
                            } else {
                                $ext = '';
                            }
                            for ($i = 1; $i < 21; $i++) {
                                $alt = "$main($i){$ext}";
                                if (!in_array($alt, $existing)) {
                                    break; // use this one
                                }
                            }
                            if ($i > 20) {
                                $i = mt_rand(50, 99); // default to something very unlikely to be conflicted
                                $alt = "$main($i){$ext}";
                            }
                            $itempath = $bp.$alt;
                        }
                        $fp = @fopen($itempath, 'w');
                        if ($fp) {
                            @fwrite($fp, $content);
                            @fclose($fp);
                            $num++;
                        } else {
                            audit('', 'UserGuide file import', 'Failed to save: '.$itempath);
                        }
                    } else {
                        audit('', 'UserGuide file import', 'Content decode failed for: '.$itempath);
                    }
                } else {
                    audit('', 'UserGuide file import', 'No content for: '.$itempath);
                }
            }
        }
        //TODO involve count($this->xml->files->item), maybe > $num, in the success indication
        return $num > 0;
    }
} // class
