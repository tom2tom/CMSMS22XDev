<?php
/*
This file is part of CMS Made Simple module: UserGuide
Copyright (C) 2024 CMS Made Simple Foundation Inc <foundation@cmsmadesimple.org>
Refer to license and other details at the top of file UserGuide.module.php
*/
namespace UserGuide;

use cms_config;
use cms_utils;
use CmsApp;
use CmsLayoutTemplateType;
use FilesystemIterator;
use Phar;
use PharData;
use RecursiveDirectoryIterator;
use RecursiveIteratorIterator;
use UserGuide; //module class in global space
use UserGuide\UserGuideUtils; //not strictly needed here
use const CMS_DB_PREFIX;
use function audit;
use function cleanValue;
use function get_recursive_file_list;
use function get_userid;
use function recursive_delete;

//this would be sensible only if a suitable tarball creator/reader is always available
//TODO confirm relevant infrastructure e.g. Phar, PharData, Gzip extensions or equivalent

class UserGuideIO
{
    private $mod; // UserGuide
    private $archive; // object
    private $archname; // filepath (pack) or directory path (unpack)
    // module preferences relevant to I/O
    private $preferences = ['filesFolder'=>''];
    // module preferences retrieved from imported archive
    private $importprefs = [];
    // filepath-basename regex's TODO check these
    private $exclude_patns = [
     '^index\.html?$',
     '^\.htaccess$',
     '^web\.config$',
     '\.git', //TODO also all descendant files
     '\.svn', //TODO also all descendant files
     'cvs$',
     '~$',
     '\.bak$',
     '\.tmp$',
     '\#.*\#$',
     '\.php.*$',
     '\.js$',
    ];

    public function __construct(UserGuide $mod = null)
    {
        if ($mod) {
            $this->mod = $mod;
        } else {
            $this->mod = cms_utils::get_module('UserGuide');
        }
        foreach ($this->preferences as $key => $val) {
            $this->preferences[$key] = $this->mod->GetPreference($key);
        }
    }

    /**
     * Export archive
     *
     * @return false or not at all
     */
    public function export()
    {
        $this->create_tball();
        $this->addPreferences();
        $this->addGuides();
        $this->addTemplates();
        $this->addStylesheets();
        $this->addFiles();
        $res = $this->output_tball();
        if ($res) exit;
        return false; //TODO return an actual success indicator
    }

    /**
     * Import selected tarball formerly generated by UserGuide
     * Basic sanity-checks for an uploaded file done upstream, not here
     * @param array $filedata $_FILES member for uploaded file
     *
     * @return bool
     */
    public function import($filedata)
    {
//      global $CMS_VERSION;
        $dwhen = date('Y-m-d_H-i-s', time());
        $config = cms_config::get_instance();
        $this->archname = $config['root_path'].DIRECTORY_SEPARATOR.'tmp'.DIRECTORY_SEPARATOR.'UserGuide_Unpack_' . $dwhen;
        if (!is_dir($this->archname)) {
            mkdir($this->archname, 0775, true);
            if (!is_dir($this->archname)) {
                return false; // TODO more info
            }
        }
        $destination = $this->archname.DIRECTORY_SEPARATOR.$filedata['name'];
        if (!@move_uploaded_file($filedata['tmp_name'], $destination)) {
            return false; // TODO more info
        }
        $obj = new PharData($destination);
        $this->archive = $obj->decompress(); // creates additional .tar file
        if (!$this->archive) {
            return false; // TODO more info
        }
        if (!$this->archive->extractTo($this->archname, null, true)) { // TODO ignore files for now
            return false; // TODO more info
        }

        $this->getPreferences();
        $num = $this->getGuides();
        $this->getTemplates();
        $this->getStylesheets();
        $filesdone = $this->getFiles();
        recursive_delete($this->archname);
        return $filesdone && $num > 0; //TODO return a comprehensive success indicator
    }

    /**
     *
     * @global type $CMS_VERSION
     */
    private function create_tball()
    {
        global $CMS_VERSION;
        $now = time();
        $filedate = date('Y-m-d_H-i-s', $now);
        $config = cms_config::get_instance();
        $this->archname = $config['root_path'].DIRECTORY_SEPARATOR.'tmp'.DIRECTORY_SEPARATOR.'UserGuide_Export_' . $filedate . '.tar';
        $this->archive = new PharData($this->archname);
        $this->archive->addFromString('dtdversion', 1.5);
        $this->archive->addFromString('module', $this->mod->GetName());
        $this->archive->addFromString('cmsversion', $CMS_VERSION);
        $this->archive->addFromString('exportdate', date('Y-m-d H:i:s', $now));
    }

    /**
     * Add all specified preferences into the tarball
     *
     * @return void
     */
    private function addPreferences()
    {
        $this->archive->addFromString('prefs', json_encode($this->preferences,
           JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES | JSON_NUMERIC_CHECK | JSON_PRESERVE_ZERO_FRACTION
        ));
    }

    /**
     * Add data from module table into the tarball
     *
     * @return void
     */
    private function addGuides()
    {
        $db = CmsApp::get_instance()->GetDb();
        $sql = 'SELECT * FROM ' . CMS_DB_PREFIX . 'module_userguide ORDER BY name';
        $data = $db->GetArray($sql);
        if ($data) {
            foreach ($data as $row) {
                // $row cleanup
                unset($row['id'], $row['author_id']); //TODO template_id unless useful for import-processing
                $this->archive->addFromString('guide::'.$row['name'], json_encode($row,
                   JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES | JSON_NUMERIC_CHECK
                ));
            }
        }
    }

    /**
     * Add data about recorded frontend templates into the tarball
     *
     * @return void
     */
    private function addTemplates()
    {
        $types = CmsLayoutTemplateType::load_all_by_originator('UserGuide');
        if ($types && is_array($types)) {
            $typers = [];
            foreach ($types as $type) {
                $id = $type->get_id();
                $typers[$id] = $type->get_name();
            }
            $db = CmsApp::get_instance()->GetDb();
            $sql = 'SELECT name,content,description,type_id,listable,created,modified FROM ' .
             CMS_DB_PREFIX . 'layout_templates WHERE id=?';
            foreach ($types as $type) {
                $templates = $type->get_template_list();
                if ($templates && is_array($templates)) {
                    foreach ($templates as $template) {
                        $row = $db->GetRow($sql, [$template->get_id()]);
                        //cleanup $row as appropriate
                        $id = (int)$row['type_id'];
                        $row['type_name'] = (isset($typers[$id])) ? $typers[$id] : 'Unknown';
                        $this->archive->addFromString('tmplt::'.$row['name'], json_encode($row,
                           JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES | JSON_NUMERIC_CHECK
                        ));
                    }
                }
            }
        }
    }

    /**
     * Add data about recorded frontend stylesheets into the tarball
     *
     * @return void
     */
    private function addStylesheets()
    {
        $db = CmsApp::get_instance()->GetDb();
        $sql = 'SELECT name,content,description,media_type,media_query,created,modified FROM ' .
         CMS_DB_PREFIX . "layout_stylesheets WHERE name LIKE 'UserGuide_%'";
        $data = $db->GetArray($sql);
        if ($data) {
            foreach ($data as $row) {
                // TODO $row cleanup
                $this->archive->addFromString('styler::'.$row['name'], json_encode($row,
                    JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES | JSON_NUMERIC_CHECK
                ));
            }
        }
    }

    /**
     * Recursively add into the tarball files & folders in and below
     * 'filesFolder' (if that preference is set and the folder exists)
     *
     * @return void
     */
    private function addFiles()
    {
        $config = cms_config::get_instance();
        $dir = $config['image_uploads_path'];
        $filesFolder = $this->preferences['filesFolder'];
        if ($filesFolder) {
            $dir .= DIRECTORY_SEPARATOR.$filesFolder;
            if (!is_dir($dir)) {
                return; // is file or N/A, assume not wanted
            }
        } else {
            return;
        }

        $files = get_recursive_file_list($dir, $this->exclude_patns);
        if (count($files) < 2) {
            return; //no files if array has only $dir (with trailing separator)
        }
        foreach ($files as $file) {
            // strip the beginning
            if (substr($file, 0, strlen($dir)) == $dir) {
                $file = substr($file, strlen($dir));
            }
            if ($file == '') {
                continue;
            }
            $filespec = $dir.$file;
            if (@is_dir($filespec)) {
                $file = rtrim($file, ' \\/');
                if ($file == '') {
                    continue;
                }
                $filespec = rtrim($filespec, ' \\/');
                $this->archive->addEmptyDir('files'.$file);
            } else {
                $this->archive->addFile($filespec, 'files'.$file);
            }
        }
    }

    /**
     * Initiate download
     * @return bool indicating success
     */
    private function output_tball()
    {
        if ($this->archive->compress(Phar::GZ)) {
            $old = ini_get('zlib.output_compression');
            if (strcasecmp($old, 'off') != 0) {
                ini_set('zlib.output_compression', 'Off');
            }

            $n = count(ob_list_handlers());
            for ($i = 0; $i < $n; $i++) { ob_end_clean(); }
//          ob_end_clean(); // not all handlers ?

            unlink($this->archname); //the original .tar can go
            $this->archname .= '.gz';
            $size = filesize($this->archname);
            header('Content-Type: application/gzip');
            header('Content-Length: ' . $size);
            header('Content-Disposition: attachment; filename='.basename($this->archname));
            header('Expires: 0');
            header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
            header('Cache-Control: private', false);
            header('Pragma: public');
            readfile($this->archname);

            unlink($this->archname);
            if (strcasecmp($old, 'off') != 0) {
                ini_set('zlib.output_compression', $old);
            }
            return true;
        } else {
            unlink($this->archname);
            return false;
        }
    }

    /**
     * Get all valid preferences from the tarball & update
     *
     * @return void
     */
    private function getPreferences()
    {
        $fp = $this->archname.DIRECTORY_SEPARATOR.'prefs';
        if (!file_exists($fp)) {
            return;
        }
        $content = file_get_contents($fp);
        $data = json_decode($content, true);
        if ($data) {
            foreach ($data as $pref => $value) {
                // record for possible use in other processing here
                $this->importprefs[$pref] = $value;
            }
        }
    }

    /**
     * Get all guide-data from the tarball & update
     *
     * @return int no. of guides processed
     */
    private function getGuides()
    {
        $fp = $this->archname.DIRECTORY_SEPARATOR.'guide::*';
        $files = glob($fp);
        if (!$files) {
            return 0;
        }
        $num = 0; //import counter
        $db = CmsApp::get_instance()->GetDb();
        $tablename = CMS_DB_PREFIX.'module_userguide';
        $existing = $db->GetCol("SELECT name FROM $tablename");
        foreach ($files as $fp) {
            $content = file_get_contents($fp);
            $data = json_decode($content, true);
            if ($data) {
                unset($data['id']);
                $data['name'] = trim(cleanValue($data['name']));
                if ($existing) {
                    $data['name'] = UserGuideUtils::uniquename($data['name'], $existing);
                } else {
                    $existing[] = $data['name'];
                }
                //position,active,admin,restricted,search,smarty,create_date,modified_date all present in data
                $data['content'] = UserGuideUtils::cleanContent($data['content']);
                $fields = implode(',', array_keys($data));
                $phs = str_repeat('?,', count($data) - 1);
                $sql = "INSERT INTO $tablename ($fields) VALUES ($phs?)";
                $dbr = $db->Execute($sql, array_values($data));
                if ($dbr) {
                    $num++;
                } else {
                    audit('', 'UserGuide import', $data['name'].' failed: '.$db->ErrorMsg());
                }
            }
        }
        //TODO involve count($files), maybe > $num, in the success indication
        return $num;
    }

    /**
     * Add frontend templates from the tarball
     *
     * @return int no. of templates processed
     */
    private function getTemplates()
    {
        $fp = $this->archname.DIRECTORY_SEPARATOR.'tmplt::*';
        $files = glob($fp);
        if (!$files) {
            return 0;
        }
        $num = 0; //import counter
        $typers = [];
        $types = CmsLayoutTemplateType::load_all_by_originator('UserGuide');
        if ($types && is_array($types)) {
            foreach ($types as $type) {
                $id = $type->get_id();
                $typers[$id] = $type->get_name();
            }
        }
        $db = CmsApp::get_instance()->GetDb();
        $tablename = CMS_DB_PREFIX . 'layout_templates';
        $existing = $db->GetCol("SELECT name FROM $tablename");
        $userid = get_userid(false);
        foreach ($files as $fp) {
            $content = file_get_contents($fp);
            $data = json_decode($content, true);
            if ($data) {
                if ($existing) {
                    $data['name'] = UserGuideUtils::uniquename($data['name'], $existing);
                } else {
                    $existing[] = $data['name'];
                }
                $val = (isset($data['type_name'])) ? trim($data['type_name']) : 'Unknown';
                $id = array_search($val, $typers);
                unset($data['type_name']);
                //TODO any content sanitize needed ?
                $data['type_id'] = ($id !== false) ? $id : 2; // default to Core::Generic
                $data['type_dflt'] = 0;
                $data['category_id'] = 0;
                $data['owner_id'] = $userid; //omitted from export or now changed
                $fields = implode(',', array_keys($data));
                $phs = str_repeat('?,', count($data) - 1);
                $sql = "INSERT INTO $tablename ($fields) VALUES ($phs?)";
                $dbr = $db->Execute($sql, array_values($data));
                if ($dbr) {
                    $num++;
                } else {
                    audit('', 'UserGuide template import', $data['name'].' failed: '.$db->ErrorMsg());
                }
            }
        }
        //TODO involve count($files), maybe > $num, in the success indication
        return $num;
    }

    /**
     * Add frontend stylesheets from the tarball
     *
     * @return int no. of guides processed
     */
    private function getStylesheets()
    {
        $fp = $this->archname.DIRECTORY_SEPARATOR.'styler::*';
        $files = glob($fp);
        if (!$files) {
            return 0;
        }
        $num = 0; //import counter
        $db = CmsApp::get_instance()->GetDb();
        $tablename = CMS_DB_PREFIX . 'layout_stylesheets';
        $existing = $db->GetCol("SELECT name FROM $tablename");
        $sql = "INSERT INTO $tablename
(name,content,description,media_type,media_query,created,modified)
VALUES (?,?,?,?,?,?,?)";
        foreach ($files as $fp) {
            $content = file_get_contents($fp);
            $data = json_decode($content, true);
            if ($data) {
                if ($existing) {
                    $data['name'] = UserGuideUtils::uniquename($data['name'], $existing);
                } else {
                    $existing[] = $data['name'];
                }
                //TODO any content sanitize needed ?
                $dbr = $db->Execute($sql, [
                    $data['name'],
                    $data['content'],
                    $data['description'],
                    $data['media_type'],
                    $data['media_query'],
                    $data['created'],
                    $data['modified']
                ]);
                if ($dbr) {
                    $num++;
                } else {
                    audit('', 'UserGuide stylesheet import', $data['name'].' failed: '.$db->ErrorMsg());
                }
            }
        }
        //TODO involve count($files), maybe > $num, in the success indication
        return $num;
    }

    /**
     * Recursively add files & folders from the tarball into and below
     * 'filesFolder' (if set)
     *
     * @return bool indicating success
     */
    private function getFiles()
    {
        $filesFolder = $this->preferences['filesFolder'];
        if (!$filesFolder) {
            return true; // none wanted == success
        }
        $fp = $this->archname.DIRECTORY_SEPARATOR.'files';
        if (!is_dir($fp)) {
            return true; // none available == success
        }
        $rdi = new RecursiveDirectoryIterator($fp,
            FilesystemIterator::KEY_AS_FILENAME |
            FilesystemIterator::CURRENT_AS_PATHNAME |
            FilesystemIterator::FOLLOW_SYMLINKS |
            FilesystemIterator::UNIX_PATHS |
            FilesystemIterator::SKIP_DOTS);
        $rii = new RecursiveIteratorIterator($rdi,
            RecursiveIteratorIterator::CHILD_FIRST
        );
        $files = [];
        foreach ($rii as $bn => $fp) {
            $files[$bn] = $fp;
        }
        if (!$files) {
            return true; // none available == success
        }
        // check whether the uploads folder is writable
        $config = cms_config::get_instance();
        $dir = $config['image_uploads_path'];
        if (!is_writable($dir)) {
            return false;
        }
        $dir .= DIRECTORY_SEPARATOR.strtr($filesFolder, '\\/', DIRECTORY_SEPARATOR.DIRECTORY_SEPARATOR);
        if (!file_exists($dir)) {
            if (!@mkdir($dir, 0775) && !is_dir($dir)) { //TODO relevant permissions
                return false;
            }
        }

        $num = 0;
        $fbp = $this->archname.'/files';
        foreach ($files as $bn => $fp) {
            $tp = str_replace($fbp, $dir, $fp);
            if (is_dir($fp)) {
                if (!(is_dir($tp) || @mkdir($tp, 0775))) { //TODO relevant permissions
                    audit('', 'UserGuide file import', 'Cannot use or create folder: '.$tp);
                    continue;
                }
            } else {
                if (file_exists($tp)) {
                    // use a similar name
                    $main = substr($bn, 0, strrpos($bn, '.'));
                    $bp = dirname($tp).DIRECTORY_SEPARATOR;
                    $all = glob($bp.$main.'*');
                    $existing = [];
                    foreach ($all as $afp) {
                        $existing[] = basename($afp);
                    }
                    if ($main != $bn) {
                        $ext = '.'.substr($bn, strrpos($bn, '.') + 1);
                    } else {
                        $ext = '';
                    }
                    for ($i = 1; $i < 21; $i++) {
                        $alt = "$main($i){$ext}";
                        if (!in_array($alt, $existing)) {
                            break; // use this one
                        }
                    }
                    if ($i > 20) {
                        $i = mt_rand(50, 99); // default to something very unlikely to be conflicted
                        $alt = "$main($i){$ext}";
                    }
                    $tp = $bp.$alt;
                }
                if (rename($fp, $tp)) {
                    $num++;
                } else {
                    audit('', 'UserGuide file import', 'Failed to save: '.$tp);
                }
            }
        }
        //TODO involve count($files), maybe > $num, in the success indication
        return $num > 0;
    }
} // class
